#!/bin/bash

# Path to the configuration file
CONFIG_FILE="/etc/bakup/config.json"

# Read backup directory, source directories, and number of backups to keep for each type from the config file
backup_dir=$(jq -r '.backupDir' "$CONFIG_FILE")
source_dirs=($(jq -r '.sourceDirs[]' "$CONFIG_FILE"))

# Read the number of backups to keep for this specific backup type (e.g., weekly, daily, etc.)
backup_type=manual  # This should be passed as an argument when calling the script (weekly, daily, etc.)
num_backups_to_keep=$(jq -r ".numBackupsToKeep.${backup_type}" "$CONFIG_FILE")

# Validate the backup type
if [ -z "$num_backups_to_keep" ]; then
    echo "Invalid backup type specified. Please use one of: weekly, daily, hourly, manual."
    exit 1
fi

# Create backup directory if not exists
mkdir -p "$backup_dir"

# Generate backup file name with timestamp
backup_file="$backup_dir/backup_$(date +%-d%H%M)W$(date +%b%Y).tar.gz"

# Perform backup
sudo tar -czvf "$backup_file" "${source_dirs[@]}"

# Remove old backups exceeding the specified limit
num_backups=$(ls -1 "$backup_dir" | grep -c '^backup_')
num_backups_to_remove=$((num_backups - num_backups_to_keep))

if [ $num_backups_to_remove -gt 0 ]; then
    # List old backups, sort by timestamp, and remove the excess
    old_backups=$(ls -1 "$backup_dir" | grep '^backup_' | sort | head -n $num_backups_to_remove)
    
    for old_backup in $old_backups; do
        rm "$backup_dir/$old_backup"
        echo "Removed old backup: $old_backup"
    done
fi

# Check the exit code of te tar command
if [ $? -eq 0 ]; then
	echo "Backup completed successfully: $backup_file"
else
	echo "Error: tar failed with status $?. Please check the source directories and permissions."
fi
